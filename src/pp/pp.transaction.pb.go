// Code generated by protoc-gen-go.
// source: pp.transaction.proto
// DO NOT EDIT!

package pp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type InjectTxnReq struct {
	CoinType         *string `protobuf:"bytes,10,opt,name=coin_type" json:"coin_type,omitempty"`
	Tx               []byte  `protobuf:"bytes,20,opt,name=tx" json:"tx,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *InjectTxnReq) Reset()                    { *m = InjectTxnReq{} }
func (m *InjectTxnReq) String() string            { return proto.CompactTextString(m) }
func (*InjectTxnReq) ProtoMessage()               {}
func (*InjectTxnReq) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *InjectTxnReq) GetCoinType() string {
	if m != nil && m.CoinType != nil {
		return *m.CoinType
	}
	return ""
}

func (m *InjectTxnReq) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

type InjectTxnRes struct {
	Result           *Result `protobuf:"bytes,1,req,name=result" json:"result,omitempty"`
	Txid             *string `protobuf:"bytes,10,opt,name=txid" json:"txid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *InjectTxnRes) Reset()                    { *m = InjectTxnRes{} }
func (m *InjectTxnRes) String() string            { return proto.CompactTextString(m) }
func (*InjectTxnRes) ProtoMessage()               {}
func (*InjectTxnRes) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *InjectTxnRes) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *InjectTxnRes) GetTxid() string {
	if m != nil && m.Txid != nil {
		return *m.Txid
	}
	return ""
}

type Tx struct {
	Value            *string `protobuf:"bytes,10,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Tx) Reset()                    { *m = Tx{} }
func (m *Tx) String() string            { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()               {}
func (*Tx) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *Tx) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type GetTxReq struct {
	CoinType         *string `protobuf:"bytes,10,opt,name=coin_type" json:"coin_type,omitempty"`
	Txid             *string `protobuf:"bytes,20,opt,name=txid" json:"txid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetTxReq) Reset()                    { *m = GetTxReq{} }
func (m *GetTxReq) String() string            { return proto.CompactTextString(m) }
func (*GetTxReq) ProtoMessage()               {}
func (*GetTxReq) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{3} }

func (m *GetTxReq) GetCoinType() string {
	if m != nil && m.CoinType != nil {
		return *m.CoinType
	}
	return ""
}

func (m *GetTxReq) GetTxid() string {
	if m != nil && m.Txid != nil {
		return *m.Txid
	}
	return ""
}

type GetTxRes struct {
	Result           *Result `protobuf:"bytes,1,req,name=result" json:"result,omitempty"`
	CoinType         *string `protobuf:"bytes,10,opt,name=coin_type" json:"coin_type,omitempty"`
	Tx               *Tx     `protobuf:"bytes,20,opt,name=tx" json:"tx,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetTxRes) Reset()                    { *m = GetTxRes{} }
func (m *GetTxRes) String() string            { return proto.CompactTextString(m) }
func (*GetTxRes) ProtoMessage()               {}
func (*GetTxRes) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{4} }

func (m *GetTxRes) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetTxRes) GetCoinType() string {
	if m != nil && m.CoinType != nil {
		return *m.CoinType
	}
	return ""
}

func (m *GetTxRes) GetTx() *Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

type GetRawTxReq struct {
	CoinType         *string `protobuf:"bytes,10,opt,name=coin_type" json:"coin_type,omitempty"`
	Txid             *string `protobuf:"bytes,20,opt,name=txid" json:"txid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetRawTxReq) Reset()                    { *m = GetRawTxReq{} }
func (m *GetRawTxReq) String() string            { return proto.CompactTextString(m) }
func (*GetRawTxReq) ProtoMessage()               {}
func (*GetRawTxReq) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{5} }

func (m *GetRawTxReq) GetCoinType() string {
	if m != nil && m.CoinType != nil {
		return *m.CoinType
	}
	return ""
}

func (m *GetRawTxReq) GetTxid() string {
	if m != nil && m.Txid != nil {
		return *m.Txid
	}
	return ""
}

type GetRawTxRes struct {
	Result           *Result `protobuf:"bytes,1,req,name=result" json:"result,omitempty"`
	CoinType         *string `protobuf:"bytes,10,opt,name=coin_type" json:"coin_type,omitempty"`
	Rawtx            *string `protobuf:"bytes,20,opt,name=rawtx" json:"rawtx,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetRawTxRes) Reset()                    { *m = GetRawTxRes{} }
func (m *GetRawTxRes) String() string            { return proto.CompactTextString(m) }
func (*GetRawTxRes) ProtoMessage()               {}
func (*GetRawTxRes) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{6} }

func (m *GetRawTxRes) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetRawTxRes) GetCoinType() string {
	if m != nil && m.CoinType != nil {
		return *m.CoinType
	}
	return ""
}

func (m *GetRawTxRes) GetRawtx() string {
	if m != nil && m.Rawtx != nil {
		return *m.Rawtx
	}
	return ""
}

type DecodeRawTxReq struct {
	CoinType         *string `protobuf:"bytes,10,opt,name=coin_type" json:"coin_type,omitempty"`
	Rawtx            *string `protobuf:"bytes,20,opt,name=rawtx" json:"rawtx,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DecodeRawTxReq) Reset()                    { *m = DecodeRawTxReq{} }
func (m *DecodeRawTxReq) String() string            { return proto.CompactTextString(m) }
func (*DecodeRawTxReq) ProtoMessage()               {}
func (*DecodeRawTxReq) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{7} }

func (m *DecodeRawTxReq) GetCoinType() string {
	if m != nil && m.CoinType != nil {
		return *m.CoinType
	}
	return ""
}

func (m *DecodeRawTxReq) GetRawtx() string {
	if m != nil && m.Rawtx != nil {
		return *m.Rawtx
	}
	return ""
}

type DecodeRawTxRes struct {
	Result           *Result `protobuf:"bytes,1,req,name=result" json:"result,omitempty"`
	CoinType         *string `protobuf:"bytes,10,opt,name=coin_type" json:"coin_type,omitempty"`
	Tx               *Tx     `protobuf:"bytes,20,opt,name=tx" json:"tx,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DecodeRawTxRes) Reset()                    { *m = DecodeRawTxRes{} }
func (m *DecodeRawTxRes) String() string            { return proto.CompactTextString(m) }
func (*DecodeRawTxRes) ProtoMessage()               {}
func (*DecodeRawTxRes) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{8} }

func (m *DecodeRawTxRes) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *DecodeRawTxRes) GetCoinType() string {
	if m != nil && m.CoinType != nil {
		return *m.CoinType
	}
	return ""
}

func (m *DecodeRawTxRes) GetTx() *Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

func init() {
	proto.RegisterType((*InjectTxnReq)(nil), "pp.InjectTxnReq")
	proto.RegisterType((*InjectTxnRes)(nil), "pp.InjectTxnRes")
	proto.RegisterType((*Tx)(nil), "pp.Tx")
	proto.RegisterType((*GetTxReq)(nil), "pp.GetTxReq")
	proto.RegisterType((*GetTxRes)(nil), "pp.GetTxRes")
	proto.RegisterType((*GetRawTxReq)(nil), "pp.GetRawTxReq")
	proto.RegisterType((*GetRawTxRes)(nil), "pp.GetRawTxRes")
	proto.RegisterType((*DecodeRawTxReq)(nil), "pp.DecodeRawTxReq")
	proto.RegisterType((*DecodeRawTxRes)(nil), "pp.DecodeRawTxRes")
}

func init() { proto.RegisterFile("pp.transaction.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x28, 0xd0, 0x2b,
	0x29, 0x4a, 0xcc, 0x2b, 0x4e, 0x4c, 0x2e, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x2a, 0x28, 0x90, 0xe2, 0x07, 0xca, 0x24, 0xe7, 0xe7, 0xe6, 0xc2, 0x04, 0x95, 0x74,
	0xb9, 0x78, 0x3c, 0xf3, 0xb2, 0x52, 0x93, 0x4b, 0x42, 0x2a, 0xf2, 0x82, 0x52, 0x0b, 0x85, 0x04,
	0xb9, 0x38, 0x93, 0xf3, 0x33, 0xf3, 0xe2, 0x4b, 0x2a, 0x0b, 0x52, 0x25, 0xb8, 0x14, 0x18, 0x35,
	0x38, 0x85, 0xb8, 0xb8, 0x98, 0x4a, 0x2a, 0x24, 0x44, 0x80, 0x6c, 0x1e, 0x25, 0x0b, 0x14, 0xe5,
	0xc5, 0x42, 0x52, 0x5c, 0x6c, 0x45, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x12, 0x8c, 0x0a, 0x4c, 0x1a,
	0xdc, 0x46, 0x5c, 0x7a, 0x40, 0x0b, 0x82, 0xc0, 0x22, 0x42, 0x3c, 0x5c, 0x2c, 0x25, 0x15, 0x99,
	0x29, 0x10, 0x53, 0x94, 0x84, 0xb9, 0x98, 0x42, 0x2a, 0x84, 0x78, 0xb9, 0x58, 0xcb, 0x12, 0x73,
	0x4a, 0xa1, 0x46, 0x2b, 0x69, 0x73, 0x71, 0xb8, 0xa7, 0x02, 0xcd, 0xc2, 0x61, 0x33, 0xcc, 0x04,
	0x11, 0xb0, 0x62, 0x5f, 0xb8, 0x62, 0xfc, 0xf6, 0x62, 0x31, 0x48, 0x08, 0xee, 0x05, 0x6e, 0x23,
	0x36, 0x90, 0xd2, 0x90, 0x0a, 0x25, 0x3d, 0x2e, 0x6e, 0xa0, 0x71, 0x41, 0x89, 0xe5, 0x44, 0x5a,
	0xef, 0x8d, 0xac, 0x9e, 0x64, 0x17, 0x00, 0x3d, 0x5e, 0x94, 0x58, 0x0e, 0x75, 0x04, 0xa7, 0x92,
	0x11, 0x17, 0x9f, 0x4b, 0x6a, 0x72, 0x7e, 0x4a, 0x2a, 0x3e, 0xfb, 0xd1, 0xf4, 0x04, 0xa3, 0xe9,
	0xa1, 0x46, 0x28, 0x00, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xbe, 0xc8, 0xda, 0x2b, 0x02, 0x00,
	0x00,
}
